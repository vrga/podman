- name: install on ubuntu
  include_tasks:
    file: ./install_package.yml
  when: not install_from_source
  tags:
    - podman
    - install
    - ubuntu

- name: install from source
  include_tasks:
    file: ./install_from_source.yml
  when: install_from_source
  tags:
    - podman
    - install
    - source

- name: set up /etc/containers
  file:
    name: /etc/containers
    owner: root
    group: root
    state: directory
  become: yes
  tags:
    - podman
    - configure

- name: set up policy.json
  copy:
    dest: /etc/containers/policy.json
    content: "{{ containers_policy | to_nice_json }}"
  tags:
    - podman
    - configure

- name: set up registries.conf
  template:
    src: templates/registries.conf.j2
    dest: /etc/containers/registries.conf
  tags:
    - podman
    - configure

- name: set up storage.conf
  template:
    src: templates/storage.conf.j2
    dest: /etc/containers/storage.conf
  tags:
    - podman
    - configure

- name: set up containers.conf
  file:
    path: /etc/containers/containers.conf
    state: absent
  tags:
    - podman
    - configure

- name: set up config dir for this role
  file:
    state: directory
    path: "{{ role_data_dir }}"
    owner: root
    group: root
  tags:
    - podman
    - configure

- name: set up cni networking configs
  copy:
    dest: "/etc/cni/net.d/{{ item.filename }}.conflist"
    content: "{{ item.data | to_nice_json }}"
  with_items: "{{ cni_networking }}"
  tags:
    - podman
    - configure

- name: set up required dir.
  file:
    path: "{{ storage_root }}"
    owner: root
    group: root
    state: directory

- name: "pull images"
  shell: |
         podman image pull "{{ item.image }}"
  with_items: "{{ containers }}"
  environment: "{{ proxy_env | default({}) }}"
  tags:
    - podman
    - images

- name: dump container config to file
  copy:
    dest: "{{ role_data_dir }}/{{ item.name }}.json"
    content: "{{ item | to_nice_json }}"
  with_items: "{{ containers }}"
  register: _container_config
  tags:
    - podman
    - containers

- name:       create volume mount dirs
  file:
    dest:  "{{ item.path }}"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    state: directory
  with_items: "{{ container_dirs }}"
  when: item.path.startswith(container_storage_root) == True
  tags:
    - podman
    - containers


- import_tasks: ./systemd_containers.yml
  when: systemd_containers

- import_tasks: ./containers.yml
  when: not systemd_containers